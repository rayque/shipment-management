// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "shipping-management/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// UpdatePackageStatusUseCase is an autogenerated mock type for the UpdatePackageStatusUseCase type
type UpdatePackageStatusUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, uuid, status
func (_m *UpdatePackageStatusUseCase) Execute(ctx context.Context, uuid string, status entities.Status) (entities.Package, error) {
	ret := _m.Called(ctx, uuid, status)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 entities.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entities.Status) (entities.Package, error)); ok {
		return rf(ctx, uuid, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, entities.Status) entities.Package); ok {
		r0 = rf(ctx, uuid, status)
	} else {
		r0 = ret.Get(0).(entities.Package)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, entities.Status) error); ok {
		r1 = rf(ctx, uuid, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUpdatePackageStatusUseCase creates a new instance of UpdatePackageStatusUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpdatePackageStatusUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UpdatePackageStatusUseCase {
	mock := &UpdatePackageStatusUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
