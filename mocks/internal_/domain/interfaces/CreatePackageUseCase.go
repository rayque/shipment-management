// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "shipping-management/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// CreatePackageUseCase is an autogenerated mock type for the CreatePackageUseCase type
type CreatePackageUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, pack
func (_m *CreatePackageUseCase) Execute(ctx context.Context, pack entities.Package) (entities.Package, error) {
	ret := _m.Called(ctx, pack)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 entities.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Package) (entities.Package, error)); ok {
		return rf(ctx, pack)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Package) entities.Package); ok {
		r0 = rf(ctx, pack)
	} else {
		r0 = ret.Get(0).(entities.Package)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Package) error); ok {
		r1 = rf(ctx, pack)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCreatePackageUseCase creates a new instance of CreatePackageUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreatePackageUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreatePackageUseCase {
	mock := &CreatePackageUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
