// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "shipping-management/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// PackageRepository is an autogenerated mock type for the PackageRepository type
type PackageRepository struct {
	mock.Mock
}

// CreatePackage provides a mock function with given fields: ctx, product
func (_m *PackageRepository) CreatePackage(ctx context.Context, product entities.Package) (entities.Package, error) {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for CreatePackage")
	}

	var r0 entities.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Package) (entities.Package, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Package) entities.Package); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Get(0).(entities.Package)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Package) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackageByUuid provides a mock function with given fields: ctx, uuid
func (_m *PackageRepository) GetPackageByUuid(ctx context.Context, uuid string) (entities.Package, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetPackageByUuid")
	}

	var r0 entities.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.Package, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.Package); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(entities.Package)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: ctx, pkg
func (_m *PackageRepository) UpdatePackage(ctx context.Context, pkg entities.Package) (entities.Package, error) {
	ret := _m.Called(ctx, pkg)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePackage")
	}

	var r0 entities.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Package) (entities.Package, error)); ok {
		return rf(ctx, pkg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Package) entities.Package); ok {
		r0 = rf(ctx, pkg)
	} else {
		r0 = ret.Get(0).(entities.Package)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Package) error); ok {
		r1 = rf(ctx, pkg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPackageRepository creates a new instance of PackageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPackageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PackageRepository {
	mock := &PackageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
